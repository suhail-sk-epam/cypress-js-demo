{
  "stats": {
    "suites": 5,
    "tests": 11,
    "passes": 8,
    "pending": 0,
    "failures": 3,
    "start": "2025-07-01T17:23:39.041Z",
    "end": "2025-07-01T17:24:30.769Z",
    "duration": 51728,
    "testsRegistered": 11,
    "passPercent": 72.72727272727273,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "a807d4c7-ce75-4077-963a-fe980efda214",
      "title": "",
      "fullFile": "cypress\\e2e\\apiTest.cy.js",
      "file": "cypress\\e2e\\apiTest.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "1268d0b4-677a-4a84-a98f-17639deeddd6",
          "title": "Login to API to get valid access_token",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "login with correct email & password",
              "fullTitle": "Login to API to get valid access_token login with correct email & password",
              "timedOut": null,
              "duration": 30496,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"cypress-mochawesome-reporter-screenshots\",\n  \"value\": [\n    [\n      \"\\\\apiTest.cy.js\\\\Login to API to get valid access_token -- login with correct email & password (failed).png\"\n    ]\n  ]\n}",
              "code": "login(`${loginuser.email}`, `${loginuser.password}`).then(result => {\n  // Receive the object containing response and access_token\n  const response = result.response; // Access the entire response object\n  // Assert that the response status code is 200\n  expect(response.status).to.eq(200);\n  // Assert that the response body contains the 'access_token' property\n  expect(response.body).to.have.property('access_token').that.is.not.empty;\n  const responseBodyString = JSON.stringify(response.body, null, 2);\n  cy.logger('apitest', 'Validated login with correct email & password');\n  cy.logger('apitest', response.body.access_token);\n});",
              "err": {
                "message": "CypressError: `cy.request()` timed out waiting `30000ms` for a response from your server.\n\nThe request we sent was:\n\nMethod: POST\nURL: https://mobilestoreapi.onrender.com/auth/login\n\nNo response was received within the timeout.\n\nhttps://on.cypress.io/request",
                "estack": "CypressError: `cy.request()` timed out waiting `30000ms` for a response from your server.\n\nThe request we sent was:\n\nMethod: POST\nURL: https://mobilestoreapi.onrender.com/auth/login\n\nNo response was received within the timeout.\n\nhttps://on.cypress.io/request\n    at <unknown> (http://localhost:60716/__cypress/runner/cypress_runner.js:133022:70)\n    at tryCatcher (http://localhost:60716/__cypress/runner/cypress_runner.js:1807:23)\n    at <unknown> (http://localhost:60716/__cypress/runner/cypress_runner.js:4186:41)\n    at tryCatcher (http://localhost:60716/__cypress/runner/cypress_runner.js:1807:23)\n    at Promise._settlePromiseFromHandler (http://localhost:60716/__cypress/runner/cypress_runner.js:1519:31)\n    at Promise._settlePromise (http://localhost:60716/__cypress/runner/cypress_runner.js:1576:18)\n    at Promise._settlePromise0 (http://localhost:60716/__cypress/runner/cypress_runner.js:1621:10)\n    at Promise._settlePromises (http://localhost:60716/__cypress/runner/cypress_runner.js:1697:18)\n    at _drainQueueStep (http://localhost:60716/__cypress/runner/cypress_runner.js:2407:12)\n    at _drainQueue (http://localhost:60716/__cypress/runner/cypress_runner.js:2400:9)\n    at Async._drainQueues (http://localhost:60716/__cypress/runner/cypress_runner.js:2416:5)\n    at Async.drainQueues (http://localhost:60716/__cypress/runner/cypress_runner.js:2286:14)\nFrom Your Spec Code:\n    at login (webpack://cypressframework/./cypress/support/apiUtils.js:5:14)\n    at Context.eval (webpack://cypressframework/./cypress/e2e/apiTest/loginUser.cy.js:9:4)",
                "diff": null
              },
              "uuid": "f81c7c2c-5584-49fb-bbd8-131564a250df",
              "parentUUID": "1268d0b4-677a-4a84-a98f-17639deeddd6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "login with incorrect email & password",
              "fullTitle": "Login to API to get valid access_token login with incorrect email & password",
              "timedOut": null,
              "duration": 12378,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "login(`${loginuser.incorrectemail}`, `${loginuser.password}`).then(result => {\n  // Receive the object containing response and access_token\n  const response = result.response; // Access the entire response object\n  // Assert that the response status code is 200\n  expect(response.status).to.eq(401);\n  // Assert that the response body contains the 'access_token' property\n  expect(response.body.message).to.eq('Incorrect email or password');\n});",
              "err": {},
              "uuid": "ee4319e0-a597-4fee-9cdd-630c599a80f5",
              "parentUUID": "1268d0b4-677a-4a84-a98f-17639deeddd6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ee4319e0-a597-4fee-9cdd-630c599a80f5"
          ],
          "failures": [
            "f81c7c2c-5584-49fb-bbd8-131564a250df"
          ],
          "pending": [],
          "skipped": [],
          "duration": 42874,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "8c5ce202-d490-4a39-9971-de184354ecc6",
          "title": "Get all products",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "GET Request with Bearer Token",
              "fullTitle": "Get all products GET Request with Bearer Token",
              "timedOut": null,
              "duration": 412,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Call the login function to log in and get the access token\nlogin(`${loginuser.email}`, `${loginuser.password}`).then(result => {\n  const accessToken = result.access_token;\n  getproducts(accessToken).then(response => {\n    expect(response.status).to.eq(200); // validate status code as 200 OK\n    const productNames = JSONPath({\n      path: '$..name',\n      json: response.body\n    });\n    // Assertion for products\n    expect(productNames).to.include('Samsung Galaxy A23 Blue', 'Redmi 11 Prime 5G', 'Samsung Galaxy Flip 5G');\n    //logging the reponse in log file;\n    const responseBodyString = JSON.stringify(response.body, null, 2);\n    cy.logger('apitest', \"\\n\" + 'Validated products for getproduct call' + \"\\n\");\n    cy.logger('apitest', 'Response Body:\\n' + responseBodyString);\n  });\n});",
              "err": {},
              "uuid": "572ad8c8-b667-45b8-9eed-4c97a45986f1",
              "parentUUID": "8c5ce202-d490-4a39-9971-de184354ecc6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validation on the request body",
              "fullTitle": "Get all products Validation on the request body",
              "timedOut": null,
              "duration": 612,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"cypress-mochawesome-reporter-screenshots\",\n  \"value\": [\n    [\n      \"\\\\apiTest.cy.js\\\\Get all products -- Validation on the request body (failed).png\"\n    ]\n  ]\n}",
              "code": "login(`${loginuser.email}`, `${loginuser.password}`).then(result => {\n  const accessToken = result.access_token;\n  getproducts(accessToken).then(response => {\n    expect(response.status).to.eq(200); // validate status code as 200 OK\n    const A23Price = JSONPath({\n      path: '$.[0].cost',\n      json: response.body\n    });\n    const M33Name = JSONPath({\n      path: '$.[2].name',\n      json: response.body\n    });\n    // Assertion for products\n    expect(M33Name[0]).to.equal('Samsung Galaxy M33 5G ');\n    expect(A23Price).to.deep.eq([18999]);\n    cy.log(JSON.stringify(response.body, null, 2));\n  });\n});",
              "err": {
                "message": "AssertionError: expected 'OnePlus Nord CE 3 Lite 5G' to equal 'Samsung Galaxy M33 5G '",
                "estack": "AssertionError: expected 'OnePlus Nord CE 3 Lite 5G' to equal 'Samsung Galaxy M33 5G '\n    at Context.eval (webpack://cypressframework/./cypress/e2e/apiTest/getProducts.cy.js:42:32)",
                "diff": "- 'OnePlus Nord CE 3 Lite 5G'\n+ 'Samsung Galaxy M33 5G '\n"
              },
              "uuid": "4c77aead-cd91-41bf-813d-bb5b119e3cd6",
              "parentUUID": "8c5ce202-d490-4a39-9971-de184354ecc6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validation for revoked access token",
              "fullTitle": "Get all products Validation for revoked access token",
              "timedOut": null,
              "duration": 130,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const accessToken = `${loginuser.revokedtoken}`;\ngetproducts(accessToken).then(response => {\n  // Assertion for the status code\n  expect(response.status).to.eq(401); // validate status code as 401\n  // Assertion for the error message\n  expect(response.body.message).to.eq('Error access_token is revoked');\n});",
              "err": {},
              "uuid": "e969bf34-34c1-412b-81e4-ce3bf8016c73",
              "parentUUID": "8c5ce202-d490-4a39-9971-de184354ecc6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validation for no Auth Token Send",
              "fullTitle": "Get all products Validation for no Auth Token Send",
              "timedOut": null,
              "duration": 165,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "getproductswithouttoken().then(response => {\n  // Assertion for the status code\n  expect(response.status).to.eq(401); // validate status code as 401\n  // Assertion for the error message\n  expect(response.body.message).to.eq('Error in authorization format');\n});",
              "err": {},
              "uuid": "509c55af-a5d9-45a8-9c74-61469da65395",
              "parentUUID": "8c5ce202-d490-4a39-9971-de184354ecc6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "572ad8c8-b667-45b8-9eed-4c97a45986f1",
            "e969bf34-34c1-412b-81e4-ce3bf8016c73",
            "509c55af-a5d9-45a8-9c74-61469da65395"
          ],
          "failures": [
            "4c77aead-cd91-41bf-813d-bb5b119e3cd6"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1319,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "4e7f9680-8457-4b89-9582-e964d5268eb9",
          "title": "Create new products",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Validate user is able to create new products",
              "fullTitle": "Create new products Validate user is able to create new products",
              "timedOut": null,
              "duration": 317,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "login(`${loginuser.email}`, `${loginuser.password}`).then(result => {\n  const accessToken = result.access_token; // Access the access_token\n  createProduct(payload, accessToken).then(response => {\n    expect(response.status).to.eq(201);\n    expect(response.body.name).to.eq(payload.name);\n    cy.logger('apitest', 'Validate user is able to create new products -- Test Passed');\n    cy.logger('apitest', JSON.stringify(response.body, null, 2));\n  });\n});",
              "err": {},
              "uuid": "9c55a5e4-15a6-486b-af0f-ca1596c6068d",
              "parentUUID": "4e7f9680-8457-4b89-9582-e964d5268eb9",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9c55a5e4-15a6-486b-af0f-ca1596c6068d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 317,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a23281e1-3c59-48c6-aadf-a57a56bd7b6c",
          "title": "Update Products",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Validate user is able to update existing products",
              "fullTitle": "Update Products Validate user is able to update existing products",
              "timedOut": null,
              "duration": 416,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": "{\n  \"title\": \"cypress-mochawesome-reporter-screenshots\",\n  \"value\": [\n    [\n      \"\\\\apiTest.cy.js\\\\Update Products -- Validate user is able to update existing products (failed).png\"\n    ]\n  ]\n}",
              "code": "login(`${loginuser.email}`, `${loginuser.password}`).then(result => {\n  const accessToken = result.access_token; // Access the access_token\n  updateProduct(payload, accessToken, productId).then(response => {\n    expect(response.status).to.eq(200);\n    expect(response.body.quantity).to.eq(payload.quantity);\n    cy.logger('apitest', 'Validate user is able to update existing products -- Test Passed');\n    cy.logger('apitest', JSON.stringify(response.body, null, 2));\n  });\n});",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'access_token')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'access_token')\n    at Context.eval (webpack://cypressframework/./cypress/support/apiUtils.js:16:40)",
                "diff": null
              },
              "uuid": "2bf4bf6b-4388-49c0-9e89-32046e8b6ab4",
              "parentUUID": "a23281e1-3c59-48c6-aadf-a57a56bd7b6c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validate if no auth token send",
              "fullTitle": "Update Products Validate if no auth token send",
              "timedOut": null,
              "duration": 2751,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.wait(2500);\nupdateProductwithoutToken(payload, productId).then(response => {\n  // Assertion for the status code\n  expect(response.status).to.eq(401); // validate status code as 401\n  // Assertion for the error message\n  expect(response.body.message).to.eq('Error in authorization format');\n});",
              "err": {},
              "uuid": "783e43dd-e178-42b2-b4f7-8dac588297ae",
              "parentUUID": "a23281e1-3c59-48c6-aadf-a57a56bd7b6c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Validate if Token is revoked",
              "fullTitle": "Update Products Validate if Token is revoked",
              "timedOut": null,
              "duration": 2655,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.wait(2500);\nconst accessToken = `${loginuser.revokedtoken}`;\nupdateProduct(payload, accessToken, productId).then(response => {\n  // Assertion for the status code\n  expect(response.status).to.eq(401); // validate status code as 401\n  // Assertion for the error message\n  expect(response.body.message).to.eq('Error access_token is revoked');\n});",
              "err": {},
              "uuid": "5ce14754-acae-41d2-97e9-93fa0c5dc88a",
              "parentUUID": "a23281e1-3c59-48c6-aadf-a57a56bd7b6c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "783e43dd-e178-42b2-b4f7-8dac588297ae",
            "5ce14754-acae-41d2-97e9-93fa0c5dc88a"
          ],
          "failures": [
            "2bf4bf6b-4388-49c0-9e89-32046e8b6ab4"
          ],
          "pending": [],
          "skipped": [],
          "duration": 5822,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "8a252056-1aa6-49ca-9852-7e6b218a1688",
          "title": "Delete Product",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Validate user is able to delete existing products",
              "fullTitle": "Delete Product Validate user is able to delete existing products",
              "timedOut": null,
              "duration": 606,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "login(`${loginuser.email}`, `${loginuser.password}`).then(result => {\n  const accessToken = result.access_token; // Access the access_token\n  deleteProduct(accessToken, productId).then(response => {\n    expect(response.status).to.eq(200);\n    cy.logger('apitest', 'Validate user is able to delete products -- Test Passed');\n    cy.logger('apitest', JSON.stringify(response.body, null, 2));\n  });\n});",
              "err": {},
              "uuid": "bea239ce-acd0-4aaf-9aef-143bc1195908",
              "parentUUID": "8a252056-1aa6-49ca-9852-7e6b218a1688",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bea239ce-acd0-4aaf-9aef-143bc1195908"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 606,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports/UIReport",
        "overwrite": false
      },
      "version": "6.2.0"
    }
  }
}